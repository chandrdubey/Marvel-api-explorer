{"ast":null,"code":"var _jsxFileName = \"D:\\\\web d\\\\React.js\\\\Learning React\\\\marvel-superstars\\\\src\\\\frontend\\\\src\\\\components\\\\CharcterPageComponent.js\";\nimport React, { Component } from \"react\";\nimport { getCharecterByIdAction, isLoadingAction } from \"../actions/getDataAction\";\nimport { connect } from 'react-redux';\nimport Spinner from \"./Spinner\";\nimport MarvelPageItemComponent from \"./marvelPageItemComponent\";\n\nclass CharcterPageComponent extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const {\n      match: {\n        params\n      }\n    } = this.props;\n    this.props.Loading();\n    this.props.getCharecterById(params.id); //   console.log(this.props.charecter);\n  }\n\n  render() {\n    let url;\n    let total_comics, comics;\n\n    if (!isEmpty(this.props.charecter)) {\n      let x = this.props.charecter.thumbnail.path;\n      url = this.props.charecter.thumbnail.path + '.' + this.props.charecter.thumbnail.extension;\n      let path = \"http://i.annihil.us/u/prod/marvel/i/mg/1/b0/5269678709fb7.jpg\";\n      total_comics = this.props.charecter.comics.available;\n      comics = this.props.charecter.comics.items;\n      console.log(comics);\n    }\n\n    return this.props.isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 30\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"header\",\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-10 mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6 charecterPage \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: url,\n      className: \"img-fluid page-image\",\n      alt: \"cahrecter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, this.props.charecter.name), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 20\n      }\n    }, \"total comics : \", total_comics))))))));\n  }\n\n}\n\nfunction isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n\n  return true;\n}\n\nconst mapStateToProps = state => {\n  return {\n    charecter: state.marvelData.charecter,\n    isLoading: state.marvelData.isLoading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCharecterById: id => dispatch(getCharecterByIdAction(id)),\n    Loading: () => dispatch(isLoadingAction())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharcterPageComponent);","map":{"version":3,"sources":["D:/web d/React.js/Learning React/marvel-superstars/src/frontend/src/components/CharcterPageComponent.js"],"names":["React","Component","getCharecterByIdAction","isLoadingAction","connect","Spinner","MarvelPageItemComponent","CharcterPageComponent","constructor","props","componentDidMount","match","params","Loading","getCharecterById","id","render","url","total_comics","comics","isEmpty","charecter","x","thumbnail","path","extension","available","items","console","log","isLoading","name","obj","key","hasOwnProperty","mapStateToProps","state","marvelData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { getCharecterByIdAction, isLoadingAction } from \"../actions/getDataAction\";\r\nimport {connect} from 'react-redux'\r\nimport Spinner from \"./Spinner\";\r\nimport MarvelPageItemComponent from \"./marvelPageItemComponent\";\r\n\r\n\r\nclass CharcterPageComponent extends Component {\r\nconstructor(props) {\r\n  super(props);\r\n  \r\n}\r\n\r\n    componentDidMount (){\r\n        const { match: { params } } = this.props;\r\n        this.props.Loading();\r\n        this.props.getCharecterById(params.id);\r\n     //   console.log(this.props.charecter);\r\n      \r\n    }\r\n    \r\n  render() {\r\n    let url;\r\n    let total_comics,comics;\r\n      if(!isEmpty(this.props.charecter)){\r\n        let x = this.props.charecter.thumbnail.path;\r\n        url =this.props.charecter.thumbnail.path + '.' +  this.props.charecter.thumbnail.extension;\r\n        let path = \"http://i.annihil.us/u/prod/marvel/i/mg/1/b0/5269678709fb7.jpg\";\r\n        total_comics = this.props.charecter.comics.available;\r\n        comics = this.props.charecter.comics.items;\r\n        console.log(comics);\r\n      }\r\n    return (\r\n      this.props.isLoading? (<Spinner />) : ( <>\r\n        <div id=\"header\" className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-10 mx-auto\">\r\n            <div className=\"row \">\r\n                <div className =\"col-6 charecterPage \">\r\n                  \r\n                   <img src={url} className=\"img-fluid page-image\" alt=\"cahrecter\" />\r\n                </div>\r\n                <div className =\"col-6\">\r\n                <h3>{this.props.charecter.name}</h3> \r\n                 <div>\r\n                   <h3>total comics : {total_comics}</h3>\r\n                   {/* <ul>\r\n                  \r\n                      <MarvelPageItemComponent charecter = {this.props.charecter}/>\r\n                     \r\n                \r\n                   </ul> */}\r\n                  \r\n                 </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>)\r\n\r\n    );\r\n  }\r\n}\r\nfunction isEmpty(obj) {\r\n  for(var key in obj) {\r\n      if(obj.hasOwnProperty(key))\r\n          return false;\r\n  }\r\n  return true;\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return { \r\n         charecter : state.marvelData.charecter,\r\n          isLoading :  state.marvelData.isLoading\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return{\r\n    getCharecterById : (id) => dispatch(getCharecterByIdAction(id)),\r\n    Loading : () => dispatch(isLoadingAction())\r\n  }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(CharcterPageComponent);\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\web d\\\\React.js\\\\Learning React\\\\marvel-superstars\\\\src\\\\frontEnd\\\\src\\\\components\\\\CharcterPageComponent.js\";\nimport React, { Component } from \"react\";\nimport { getCharecterByIdAction, isLoadingAction, addCharecterToFavAction, removeCharecterToFavAction } from \"../actions/getDataAction\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"./Spinner\";\nimport MarvelPageItemComponent from \"./MarvelPageItemComponent\";\n\nclass CharcterPageComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFavourite = () => {\n      if (!this.props.isLoggedIn) {\n        this.props.history.push(\"/login\");\n      } else {\n        //  console.log(\"lo\");\n        this.setState({\n          isFavourite: true\n        });\n        const {\n          match: {\n            params\n          }\n        } = this.props;\n        const userId = this.props.currentUser.id;\n        const data = {\n          charecter_id: params.id,\n          name: this.props.charecter.name,\n          image: this.props.charecter.thumbnail.path + \".\" + this.props.charecter.thumbnail.extension\n        };\n        this.props.addCharecterFav(userId, data);\n      }\n    };\n\n    this.handleUnFavourite = () => {\n      const {\n        match: {\n          params\n        }\n      } = this.props;\n      const userId = this.props.currentUser.id;\n      console.log(\"hello\");\n      this.setState({\n        isFavourite: false\n      });\n      this.props.removeCharecterToFav(userId, params.id);\n    };\n\n    this.state = {\n      isFavourite: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      match: {\n        params\n      }\n    } = this.props;\n    this.props.Loading();\n    this.props.getCharecterById(params.id);\n    let user = this.props.currentUser;\n    console.log(this.props.favCharecters);\n    console.log(user);\n    console.log(`is ${this.props.isLoggedIn}`);\n\n    if (this.props.favCharecters) {\n      if (this.props.favCharecters.length > 0 && this.props.favCharecters.some(charecterMarvel => charecterMarvel.charecter_id === params.id)) {\n        console.log(\"hello indaia\");\n        this.setState({\n          isFavourite: true\n        });\n      }\n    }\n  }\n\n  render() {\n    let image, knowMorUrl;\n    let total_comics, comics, series;\n\n    if (!isEmpty(this.props.charecter)) {\n      image = this.props.charecter.thumbnail.path + \".\" + this.props.charecter.thumbnail.extension;\n      total_comics = this.props.charecter.comics.available;\n      comics = this.props.charecter.comics.items;\n      series = this.props.charecter.series;\n      knowMorUrl = this.props.charecter.urls; //  console.log(knowMorUrl);\n    }\n\n    return this.props.isLoading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"header\",\n      className: \"container-fluid show-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row set-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-10 mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-5 charecter-image \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: image,\n      className: \"img-fluid page-image\",\n      alt: \"charecter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-7 charecter-detail \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, this.props.charecter.name, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 23\n      }\n    }, this.state.isFavourite ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn  fav-btn\",\n      onClick: this.handleUnFavourite,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 27\n      }\n    }, \"UnFavourite\") : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn  fav-btn\",\n      onClick: this.handleFavourite,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 27\n      }\n    }, \"Favourite\"))), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }, this.props.charecter.description), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 23\n      }\n    }, this.props.charecter.name, \" : Comics (\", total_comics, \")\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(MarvelPageItemComponent, {\n      comics: comics,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }))), series && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 32\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 23\n      }\n    }, this.props.charecter.name, \" : Series (\", series.available, \")\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(MarvelPageItemComponent, {\n      comics: series.items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 25\n      }\n    }))), knowMorUrl && /*#__PURE__*/React.createElement(\"a\", {\n      href: knowMorUrl[0].url,\n      className: \"btn btn-get-started\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 23\n      }\n    }, \"Know more\"))))))));\n  }\n\n}\n\nfunction isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n\n  return true;\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.auth.currentUser,\n    charecter: state.marvelData.charecter,\n    isLoading: state.marvelData.isLoading,\n    isLoggedIn: state.auth.isLoggedIn,\n    favCharecters: state.marvelData.favCharecters\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCharecterById: id => dispatch(getCharecterByIdAction(id)),\n    Loading: () => dispatch(isLoadingAction()),\n    addCharecterFav: (userId, data) => dispatch(addCharecterToFavAction(userId, data)),\n    removeCharecterToFav: (userId, charecterId) => dispatch(removeCharecterToFavAction(userId, charecterId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharcterPageComponent);","map":{"version":3,"sources":["D:/web d/React.js/Learning React/marvel-superstars/src/frontEnd/src/components/CharcterPageComponent.js"],"names":["React","Component","getCharecterByIdAction","isLoadingAction","addCharecterToFavAction","removeCharecterToFavAction","connect","Spinner","MarvelPageItemComponent","CharcterPageComponent","constructor","props","handleFavourite","isLoggedIn","history","push","setState","isFavourite","match","params","userId","currentUser","id","data","charecter_id","name","charecter","image","thumbnail","path","extension","addCharecterFav","handleUnFavourite","console","log","removeCharecterToFav","state","componentDidMount","Loading","getCharecterById","user","favCharecters","length","some","charecterMarvel","render","knowMorUrl","total_comics","comics","series","isEmpty","available","items","urls","isLoading","description","url","obj","key","hasOwnProperty","mapStateToProps","auth","marvelData","mapDispatchToProps","dispatch","charecterId"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  getCharecterByIdAction,\r\n  isLoadingAction,\r\n  addCharecterToFavAction,\r\n  removeCharecterToFavAction,\r\n} from \"../actions/getDataAction\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"./Spinner\";\r\nimport MarvelPageItemComponent from \"./MarvelPageItemComponent\";\r\n\r\nclass CharcterPageComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isFavourite: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      match: { params },\r\n    } = this.props;\r\n    this.props.Loading();\r\n    this.props.getCharecterById(params.id);\r\n    let user = this.props.currentUser;\r\n    console.log(this.props.favCharecters);\r\n    console.log(user);\r\n    console.log(`is ${this.props.isLoggedIn}`);\r\n\r\n    if (this.props.favCharecters) {\r\n      if (\r\n        this.props.favCharecters.length > 0 &&\r\n        this.props.favCharecters.some(\r\n          (charecterMarvel) => charecterMarvel.charecter_id === params.id\r\n        )\r\n      ) {\r\n        console.log(\"hello indaia\");\r\n        this.setState({\r\n          isFavourite: true,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  handleFavourite = () => {\r\n    if (!this.props.isLoggedIn) {\r\n      this.props.history.push(\"/login\");\r\n    } else {\r\n    //  console.log(\"lo\");\r\n      this.setState({\r\n        isFavourite: true,\r\n      });\r\n      const {\r\n        match: { params },\r\n      } = this.props;\r\n      const userId = this.props.currentUser.id;\r\n      const data = {\r\n        charecter_id: params.id,\r\n        name: this.props.charecter.name,\r\n        image:\r\n          this.props.charecter.thumbnail.path +\r\n          \".\" +\r\n          this.props.charecter.thumbnail.extension,\r\n      };\r\n      this.props.addCharecterFav(userId, data);\r\n    }\r\n  };\r\n  handleUnFavourite = () => {\r\n    const {\r\n      match: { params },\r\n    } = this.props;\r\n    const userId = this.props.currentUser.id;\r\n    console.log(\"hello\");\r\n    this.setState({\r\n      isFavourite: false,\r\n    });\r\n    this.props.removeCharecterToFav(userId, params.id);\r\n  };\r\n  render() {\r\n    let image, knowMorUrl;\r\n    let total_comics, comics, series;\r\n    if (!isEmpty(this.props.charecter)) {\r\n      image =\r\n        this.props.charecter.thumbnail.path +\r\n        \".\" +\r\n        this.props.charecter.thumbnail.extension;\r\n\r\n      total_comics = this.props.charecter.comics.available;\r\n      comics = this.props.charecter.comics.items;\r\n      series = this.props.charecter.series;\r\n      knowMorUrl = this.props.charecter.urls;\r\n\r\n      //  console.log(knowMorUrl);\r\n    }\r\n    return this.props.isLoading ? (\r\n      <Spinner />\r\n    ) : (\r\n      <>\r\n        <div id=\"header\" className=\"container-fluid show-page\">\r\n          <div className=\"row set-row\">\r\n            <div className=\"col-10 mx-auto\">\r\n              <div className=\"row \">\r\n                <div className=\"col-5 charecter-image \">\r\n                  <img\r\n                    src={image}\r\n                    className=\"img-fluid page-image\"\r\n                    alt=\"charecter\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-7 charecter-detail \">\r\n                  <div className=\"\">\r\n                    <h3>\r\n                      {this.props.charecter.name}\r\n                      <span className=\"float-right\">\r\n                        {this.state.isFavourite ? (\r\n                          <button\r\n                            className=\"btn  fav-btn\"\r\n                            onClick={this.handleUnFavourite}\r\n                          >\r\n                            UnFavourite\r\n                          </button>\r\n                        ) : (\r\n                          <button\r\n                            className=\"btn  fav-btn\"\r\n                            onClick={this.handleFavourite}\r\n                          >\r\n                            Favourite\r\n                          </button>\r\n                        )}\r\n                      </span>\r\n                    </h3>\r\n                    <hr />\r\n                    <p>{this.props.charecter.description}</p>\r\n                    <div>\r\n                      <h3>\r\n                        {this.props.charecter.name} : Comics ({total_comics})\r\n                      </h3>\r\n                      <hr />\r\n                      <ul>\r\n                        <MarvelPageItemComponent comics={comics} />\r\n                      </ul>\r\n                    </div>\r\n                   {series && (<div>\r\n                      <h3>\r\n                        {this.props.charecter.name} : Series ({series.available})\r\n                      </h3>\r\n                      <hr />\r\n                      <ul>\r\n                        <MarvelPageItemComponent comics={series.items} />\r\n                      </ul>\r\n                    </div>) }\r\n                    {knowMorUrl && (\r\n                      <a\r\n                        href={knowMorUrl[0].url}\r\n                        className=\"btn btn-get-started\"\r\n                      >\r\n                        Know more\r\n                      </a>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nfunction isEmpty(obj) {\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) return false;\r\n  }\r\n  return true;\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.auth.currentUser,\r\n    charecter: state.marvelData.charecter,\r\n    isLoading: state.marvelData.isLoading,\r\n    isLoggedIn: state.auth.isLoggedIn,\r\n    favCharecters: state.marvelData.favCharecters,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCharecterById: (id) => dispatch(getCharecterByIdAction(id)),\r\n    Loading: () => dispatch(isLoadingAction()),\r\n    addCharecterFav: (userId, data) =>\r\n      dispatch(addCharecterToFavAction(userId, data)),\r\n    removeCharecterToFav: (userId, charecterId) =>\r\n      dispatch(removeCharecterToFavAction(userId, charecterId)),\r\n    \r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CharcterPageComponent);\r\n"]},"metadata":{},"sourceType":"module"}